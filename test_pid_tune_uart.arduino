#include <AFMotor.h>

// Define pins for the sensors and motor
const int encoderPin = 2;
const int trigPin = 3;
const int echoPin = 4;

// Create a motor object
AF_DCMotor motor(1);  // Adjust motor port as necessary

// Variables for the encoder
volatile long encoderPosition = 0;

// Variables for the distance sensor
long duration;
int distance;

// PID controller variables
double kp = 1.0;
double ki = 0.0;
double kd = 0.0;
double setPoint = 0.0;
double input = 0.0;
double output = 0.0;

// Serial input buffer
String inputString = "";

void setup() {
  // Initialize the encoder pin as input
  pinMode(encoderPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(encoderPin), readEncoder, CHANGE);

  // Initialize the distance sensor pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Initialize serial communication
  Serial.begin(9600);

  // Set the initial motor speed
  motor.setSpeed(200);  // Adjust speed as necessary

  // Initialize the input string
  inputString.reserve(200);
}

void loop() {
  // Read the distance sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2; // Calculate the distance in cm

  // Read the encoder position
  input = encoderPosition;

  // Compute the PID output
  output = computePID(input, setPoint);

  // Control the motor based on the PID output
  controlMotor(output);

  // Print the sensor values to the serial monitor
  Serial.print("Encoder Position: ");
  Serial.print(encoderPosition);
  Serial.print(" Distance: ");
  Serial.println(distance);

  // Handle incoming serial data
  if (Serial.available()) {
    char inChar = (char)Serial.read();
    if (inChar == '\n') {
      parseInput(inputString);
      inputString = "";
    } else {
      inputString += inChar;
    }
  }

  // Small delay to avoid flooding the serial monitor
  delay(100);
}

// Interrupt service routine to read the encoder
void readEncoder() {
  int state = digitalRead(encoderPin);
  if (state == HIGH) {
    encoderPosition++;
  } else {
    encoderPosition--;
  }
}

// PID computation function
double computePID(double input, double setPoint) {
  static double lastError = 0.0;
  static double integral = 0.0;

  double error = setPoint - input;
  integral += error;
  double derivative = error - lastError;

  double output = kp * error + ki * integral + kd * derivative;

  lastError = error;

  return output;
}

// Function to control the motor based on PID output
void controlMotor(double output) {
  int motorSpeed = constrain(abs(output), 0, 255);
  
  if (output > 0) {
    motor.setSpeed(motorSpeed);
    motor.run(FORWARD);
  } else {
    motor.setSpeed(motorSpeed);
    motor.run(BACKWARD);
  }
}

// Function to parse serial input and update PID constants
void parseInput(String input) {
  input.trim(); // Remove any extra spaces or newline characters

  if (input.startsWith("kp")) {
    kp = input.substring(3).toDouble();
    Serial.print("Updated kp: ");
    Serial.println(kp);
  } else if (input.startsWith("ki")) {
    ki = input.substring(3).toDouble();
    Serial.print("Updated ki: ");
    Serial.println(ki);
  } else if (input.startsWith("kd")) {
    kd = input.substring(3).toDouble();
    Serial.print("Updated kd: ");
    Serial.println(kd);
  } else {
    Serial.println("Invalid command. Use kp, ki, or kd followed by the value.");
  }
}
